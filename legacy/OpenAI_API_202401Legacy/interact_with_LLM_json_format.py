import json
import os
import re
import sys

import numpy as np
from openai import OpenAI
from torch.utils.data import DataLoader
from tqdm import tqdm

import openai

from API_test_202401Legacy.test_OpenAI_API import interact_with_GPT

os.environ["http_proxy"] = "http://localhost:7890"
os.environ["https_proxy"] = "http://localhost:7890"

def extract_probability_from_json_format_response(gpt_response):
    """
    Extracts the probability of stock price rise from GPT's response.

    Parameters:
    gpt_response (str): The response generated by GPT.

    Returns:
    float: The extracted probability.
    """

    start_index = gpt_response.find('{')
    end_index = gpt_response.rfind('}')
    if start_index != -1 and end_index != -1 and start_index < end_index:
        gpt_response = gpt_response[start_index:end_index+1]

    response_dict = json.loads(gpt_response)
    
    results = []

    rise_prob = response_dict.get("probability_of_stock_price_rise")
    if rise_prob is not None:
        results.append(int(rise_prob) / 100)
    else:
        results.append("Rise probability not found")

    fall_prob = response_dict.get("probability_of_stock_price_fall")
    if fall_prob is not None:
        results.append(int(fall_prob) / 100)
    else:
        results.append("Fall probability not found")

    return results


def get_prediction(news_id, headline, content, company_symbol, company_name, model_name, **kwargs):
    system_message = "You are an AI trained to analyze financial news and estimate the probability that the stock price of a specific company will rise or fall due to the news." + \
        "Your response should be in JSON format and include the following information: \n" + \
        "company_name: The name of the company. \n" + \
        "company_symbol: The stock symbol of the company. \n" + \
        "news_headline: The provided financial news headline. \n" + \
        "probability_of_stock_price_rise: The estimated probability (in percentage) that the stock price will rise due to this news. \n" + \
        "probability_of_stock_price_fall: The estimated probability (in percentage) that the stock price will fall due to this news. \n" + \
        "reasoning: A brief explanation of your reasoning. \n" + \
        "Format your response as follows: \n" + \
        "{ \n" + \
        '"company_name": "[Company Name]", \n' + \
        '"company_symbol": "[Company Symbol]", \n' + \
        '"news_headline": "[News Headline]", \n' + \
        '"probability_of_stock_price_rise": [Percentage], \n' + \
        '"probability_of_stock_price_fall": [Percentage], \n' + \
        '"reasoning": "[Brief explanation]" \n' + \
        "} \n" + \
        "Use the information provided and any general knowledge you have about the financial markets to support your analysis. \n" + \
        "Do not generate output that isn't in properly formatted JSON."
        
    user_message = f"Here's the company information and financial news: \n" + \
        f"Company Name: {company_name} \n" + \
        f"Company Symbol: {company_symbol} \n" + \
        f"News Headline: {headline} \n" + \
        f"News Content: {content}"
    
    os.makedirs(f'log/LLM_response/{model_name}', exist_ok=True)
    json_file_path = f'log/LLM_response/{model_name}/{news_id}_json_format_response.json'

    content_json_format = interact_with_GPT(model_name, system_message, user_message, json_file_path, **kwargs)

    prediction = extract_probability_from_json_format_response(content_json_format["assistant"])

    return prediction


if __name__ == "__main__":
    
    """
    # Example GPT JSON response
    gpt_response = '''
    {
        "company_name": "ABC Corp",
        "company_symbol": "ABC",
        "news_headline": "Tech Giant ABC Corp Announces Major Acquisition of XYZ Ltd for $5 Billion",
        "probability_of_stock_price_rise": 70,
        "probability_of_stock_price_fall": 30,
        "reasoning": "The acquisition is generally positive, suggesting strategic expansion and potential long-term growth for ABC Corp. However, the high acquisition cost introduces some risk, tempering the probability."
    }
    '''

    # Extract the probability from the example JSON response
    probability = extract_probability_from_json_format_response(gpt_response)
    print(f"Extracted Probability: {probability}")
    """
    
    data_file_path = './data/financial_news_headlines/origin_data.json'
    with open(data_file_path, 'r') as f:
        data = json.load(f)
    
    prediction_results = []
    model_list = ['gpt-4o-2024-05-13', 'gpt-4o-mini-2024-07-18', 'gpt-4-turbo-2024-04-09', 'gpt-4-0613', 'gpt-3.5-turbo-0125']
    news_id = 0
    for company_symbol_dict in data:
        company_symbol = company_symbol_dict["company_symbol"]
        company_name = company_symbol_dict["company_name"]
        for news_dict in company_symbol_dict["financial_news"]:
            headline = news_dict["title"]
            content = news_dict["content"]

            results_dict = {}
            results_dict["company_symbol"] = company_symbol
            results_dict["company_name"] = company_name
            results_dict["news_id"] = news_id
            results_dict["headline"] = headline
            results_dict["content"] = content
            results_dict["predictions"] = []

            for model_name in model_list:
                prediction_dict = {}
                pred_rise, pred_fall = get_prediction(news_id, headline, content, company_symbol, company_name, model_name,
                                       logprobs=True, top_logprobs=5)
                prediction_dict["model_name"] = model_name
                prediction_dict["rise_prediction"] = pred_rise
                prediction_dict["fall_prediction"] = pred_fall
                results_dict["predictions"].append(prediction_dict)

            news_id += 1
            prediction_results.append(results_dict)

    results_file_path = "./results/LLM_predictions/LLM_predictions_json_format_response.json"
    with open(results_file_path, 'w') as f:
        json.dump(prediction_results, f)
        