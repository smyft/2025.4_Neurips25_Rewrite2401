import json
import os
import re
import sys

import numpy as np
from openai import OpenAI
from torch.utils.data import DataLoader
from tqdm import tqdm

import openai

from API_test_202401Legacy.test_OpenAI_API import interact_with_GPT

os.environ["http_proxy"] = "http://localhost:7890"
os.environ["https_proxy"] = "http://localhost:7890"

def extract_probability(gpt_response):
    """
    Extracts the probability of stock price rise from GPT's response.

    Parameters:
    gpt_response (str): The response generated by GPT.

    Returns:
    float: The extracted probability.
    """
    # Define the regex pattern to match the probability percentage
    pattern1 = r'Probability of Stock Price Rise:\s*(\d+)%'
    pattern2 = r'Probability of Stock Price Fall:\s*(\d+)%'
    
    results = []

    # Search for the pattern in the response
    match = re.search(pattern1, gpt_response)
    # If a match is found, return the percentage
    if match:
        results.append(int(match.group(1)) / 100)
    else:
        results.append("Probability not found")

    match = re.search(pattern2, gpt_response)
    # If a match is found, return the percentage
    if match:
        results.append(int(match.group(1)) / 100)
    else:
        results.append("Probability not found")

    return results


def get_prediction(news_id, headline, content, company_symbol, company_name, model_name, **kwargs):
    system_message = "You are an AI trained to analyze financial news and estimate the probability that the stock price of a specific company will rise or fall due to the news." + \
        "Your response should include only the following information: \n" + \
        "Probability of Stock Price Rise: Estimate the probability (in percentage) that the stock price will rise due to this news, \n" + \
        "Probability of Stock Price Fall: Estimate the probability (in percentage) that the stock price will fall due to this news, \n" + \
        "And explain your reasoning briefly. \n" + \
        "Format your response as follows: \n" + \
        "Company Name and Symbol: [Company Name (Symbol)] \n" + \
        "News Headline: [Insert Financial News Headline Here] \n" + \
        "Probability of Stock Price Rise: [Percentage]% \n" + \
        "Probability of Stock Price Fall: [Percentage]% \n" + \
        "Reasoning: \n" + \
        "[Brief explanation] \n" + \
        "Use the information provided and any general knowledge you have about the financial markets to support your analysis."
        
    user_message = f"Here's the company information and financial news: \n" + \
        f"Company Name: {company_name} \n" + \
        f"Company Symbol: {company_symbol} \n" + \
        f"News Headline: {headline} \n" + \
        f"News Content: {content}"
    
    os.makedirs(f'log/LLM_response/{model_name}', exist_ok=True)
    json_file_path = f'log/LLM_response/{model_name}/{news_id}.json'

    content_json_format = interact_with_GPT(model_name, system_message, user_message, json_file_path, **kwargs)

    prediction = extract_probability(content_json_format["assistant"])

    return prediction


if __name__ == "__main__":
    '''
    # Example GPT response
    gpt_response = """
    System:
    Company Name and Symbol:
    ABC Corp (ABC)

    News Headline:
    "Tech Giant ABC Corp Announces Major Acquisition of XYZ Ltd for $5 Billion"

    Probability of Stock Price Rise:
    70%

    Reasoning:
    The acquisition is generally positive, suggesting strategic expansion and potential long-term growth for ABC Corp. However, the high acquisition cost introduces some risk, tempering the probability.
    """

    # Extract the probability from the example response
    probability = extract_probability(gpt_response)
    print(f"Extracted Probability: {probability}")
    '''

    data_file_path = './data/financial_news_headlines/origin_data.json'
    with open(data_file_path, 'r') as f:
        data = json.load(f)
    
    prediction_results = []
    model_list = ['gpt-4o-2024-05-13', 'gpt-4o-mini-2024-07-18', 'gpt-4-turbo-2024-04-09', 'gpt-4-0613', 'gpt-3.5-turbo-0125']
    news_id = 0
    for company_symbol_dict in data:
        company_symbol = company_symbol_dict["company_symbol"]
        company_name = company_symbol_dict["company_name"]
        for news_dict in company_symbol_dict["financial_news"]:
            headline = news_dict["title"]
            content = news_dict["content"]

            results_dict = {}
            results_dict["company_symbol"] = company_symbol
            results_dict["company_name"] = company_name
            results_dict["news_id"] = news_id
            results_dict["headline"] = headline
            results_dict["content"] = content
            results_dict["predictions"] = []

            for model_name in model_list:
                prediction_dict = {}
                pred_rise, pred_fall = get_prediction(news_id, headline, content, company_symbol, company_name, model_name,
                                       logprobs=True, top_logprobs=5)
                prediction_dict["model_name"] = model_name
                prediction_dict["rise_prediction"] = pred_rise
                prediction_dict["fall_prediction"] = pred_fall
                results_dict["predictions"].append(prediction_dict)

            news_id += 1
            prediction_results.append(results_dict)

    results_file_path = "./results/LLM_predictions.json"
    with open(results_file_path, 'w') as f:
        json.dump(prediction_results, f)
