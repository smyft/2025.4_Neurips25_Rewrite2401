import json
import os
import re
import sys

import numpy as np
from openai import OpenAI
from torch.utils.data import DataLoader
from tqdm import tqdm
import requests
import openai
from datetime import datetime

from LLM_prediction.Openrouter_API.LLM_interface import LLM_interface


def extract_probability_from_json_format_response(llm_response):
    """
    Extracts the probability of stock price rise from LLM's response.

    Parameters:
    llm_response (str): The response generated by LLM.

    Returns:
    float: The extracted probability.
    """
    try:
        start = llm_response.find('{')
        end = llm_response.rfind('}')
        if start == -1 or end == -1 or start >= end:
            return ["Invalid JSON", "Invalid JSON", "Invalid JSON"]
            
        response_dict = json.loads(llm_response[start:end+1])
        
        required_fields = ["probability_of_stock_price_rise", "probability_of_stock_price_fall", "reasoning"]
        for field in required_fields:
            if field not in response_dict:
                return [f"Missing {field}", f"Missing {field}", f"Missing {field}"]
                
        # rise = int(response_dict["probability_of_stock_price_rise"]) / 100
        # fall = int(response_dict["probability_of_stock_price_fall"]) / 100
        rise = float(response_dict["probability_of_stock_price_rise"])
        fall = float(response_dict["probability_of_stock_price_fall"])
        return [rise, fall, response_dict["reasoning"]]
        
    except (json.JSONDecodeError, ValueError, TypeError, KeyError) as e:
        return ["Parse error", "Parse error", "Parse error"]


def get_prediction_single_round(news_id, headline, content, company_symbol, company_name, model_name, current_time, **kwargs):
    '''
    user_message = "Now I want you to help me analyze financial news. " + \
        "I will provide you a piece of financial news, and some information regarding the relevant company. " + \
        "Please use the information provided and any general knowledge you have to estimate the probability of the stock price of the relevant company rising or falling due to the news. \n" + \
        "Here's the company information and financial news: \n" + \
        "{ \n" + \
        f"Company Name: {company_name} \n" + \
        f"Company Symbol: {company_symbol} \n" + \
        f"News Headline: {headline} \n" + \
        f"News Content: {content} \n" + \
        "} \n" + \
        "Now give your prediction about the probability of the stock price of the relevant company rising or falling. " + \
        "Format your response in JSON format and include the following information as follows: \n" + \
        "{ \n" + \
        '"company_name": "[Company Name indicating the name of the company]", \n' + \
        '"company_symbol": "[Company Symbol indicating the stock symbol of the company]", \n' + \
        '"news_headline": "[News Headline indicating the provided financial news headline]", \n' + \
        '"probability_of_stock_price_rise": [The estimated probability (in percentage) that the stock price will rise due to this news], \n' + \
        '"probability_of_stock_price_fall": [The estimated probability (in percentage) that the stock price will fall due to this news], \n' + \
        "} \n"
        # "Do not generate output that isn't in properly formatted JSON."
        # '"reasoning": "[Breifly summarize your intermediate thinking process here]" \n' + \
    '''

    base_info = (
        "Analyze this financial news and estimate stock price movement probabilities.\n"
        f"Company: {company_name} ({company_symbol})\n"
        f"News Headline: {headline}\n"
        f"News Content: {content}"
    )

    response_format = (
        "Now give your prediction about the probability of the stock price of the relevant company rising or falling. "
        "Format your response in JSON format and include the following information as follows: \n"
        "{ \n"
        '"reasoning": "[Summarize your analysis and reasoning process here]", \n'
        '"company_name": "[Company Name indicating the name of the company]", \n'
        '"company_symbol": "[Company Symbol indicating the stock symbol of the company]", \n'
        '"news_headline": "[News Headline indicating the provided financial news headline]", \n'
        '"probability_of_stock_price_rise": [The estimated probability (a number between 0 and 1) that the stock price will rise due to this news], \n'
        '"probability_of_stock_price_fall": [The estimated probability (a number between 0 and 1) that the stock price will fall due to this news], \n'
        "} \n"
        "Do not generate output that isn't in properly formatted JSON."
    )
    
    user_message = (
        f"{base_info}\n\n"
        f"{response_format}"
    )

    model_name_for_path = model_name
    if '/' in model_name:
        model_name_for_path = "-".join(model_name.split('/'))
    os.makedirs(f'log/Single_Round/{current_time}/{news_id}', exist_ok=True)
    log_file_path = f'log/Single_Round/{current_time}/{news_id}/{model_name_for_path}.json'
    dialogue_history = [{"role": "user", "content": user_message}]

    print("------")
    print(f"model_name_for_path: {model_name_for_path}")
    dialogue_content = LLM_interface(
        model=model_name,
        dialogue_history=dialogue_history,
        log_file_path=log_file_path,
        **kwargs
    )
    print("------")

    if dialogue_content is None:
        return ["Missing dialogue content", "Missing dialogue content", "Missing dialogue content"]

    dialogue_content = dialogue_content["dialogue_history"]
    last_assistant_content = None
    for msg in reversed(dialogue_content):
        if msg.get("role") == "assistant":
            last_assistant_content = msg.get("content")
            break

    if last_assistant_content is None:
        print(dialogue_content)
        return ["Missing assistant response", "Missing assistant response", "Missing assistant response"]

    prediction = extract_probability_from_json_format_response(last_assistant_content)

    return prediction


if __name__ == "__main__":
    
    """
    # Example GPT JSON response
    gpt_response = '''
    {
        "company_name": "ABC Corp",
        "company_symbol": "ABC",
        "news_headline": "Tech Giant ABC Corp Announces Major Acquisition of XYZ Ltd for $5 Billion",
        "probability_of_stock_price_rise": 70,
        "probability_of_stock_price_fall": 30,
        "reasoning": "The acquisition is generally positive, suggesting strategic expansion and potential long-term growth for ABC Corp. However, the high acquisition cost introduces some risk, tempering the probability."
    }
    '''

    # Extract the probability from the example JSON response
    probability = extract_probability_from_json_format_response(gpt_response)
    print(f"Extracted Probability: {probability}")
    """
    
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    
    start_date = '2025-01-01'
    end_date = '2025-01-31'
    data_file_path = f'data/financial_news_headlines/origin_data_{start_date}_{end_date}_AAPL.json'
    # data_file_path = f'data/financial_news_headlines/origin_data_20samples.json'
    with open(data_file_path, 'r') as f:
        data = json.load(f)
    
    # model_list = ['openai/gpt-4o-mini', 'google/gemini-2.0-flash-001', 'deepseek/deepseek-r1', 'anthropic/claude-3.7-sonnet']
    model_list = ['openai/gpt-4o-mini', 'google/gemini-2.0-flash-001', 'google/gemini-flash-1.5', 'deepseek/deepseek-chat-v3-0324',
                  'meta-llama/llama-4-scout', 'meta-llama/llama-3.3-70b-instruct', 'qwen/qwen-turbo']

    prediction_results = []
    news_id = 0
    for company_symbol_dict in data:
        company_symbol = company_symbol_dict["company_symbol"]
        company_name = company_symbol_dict["company_name"]
        for news_dict in company_symbol_dict["financial_news"]:
            print("******")
            print(f"Processing News id: {news_id}")

            headline = news_dict["title"]
            content = news_dict["content"]

            results_dict = {}
            results_dict["company_symbol"] = company_symbol
            results_dict["company_name"] = company_name
            results_dict["news_id"] = news_id
            results_dict["headline"] = headline
            results_dict["content"] = content
            results_dict["predictions"] = []

            for model_name in model_list:
                prediction_dict = {}
                pred_rise, pred_fall, reasoning = get_prediction_single_round(
                    news_id=news_id,
                    headline=headline,
                    content=content,
                    company_symbol=company_symbol,
                    company_name=company_name,
                    model_name=model_name,
                    current_time=current_time,
                    logprobs=False
                )
                prediction_dict["model_name"] = model_name
                prediction_dict["rise_prediction"] = pred_rise
                prediction_dict["fall_prediction"] = pred_fall
                prediction_dict["reasoning"] = reasoning
                results_dict["predictions"].append(prediction_dict)

            news_id += 1
            prediction_results.append(results_dict)

            print("******")

    os.makedirs(f"./results/LLM_predictions/Single_Round", exist_ok=True)
    results_file_path = f"./results/LLM_predictions/Single_Round/{current_time}.json"
    with open(results_file_path, 'w') as f:
        json.dump(prediction_results, f)
